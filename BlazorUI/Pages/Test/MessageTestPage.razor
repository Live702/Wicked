@namespace BlazorUI
@page "/MessageTestPage"
@inherits LzComponentBaseAssignViewModel<MessagesViewModel>
@inject ISessionsViewModel SessionsViewModel
@inject IMessageViewModelFactory MessageViewModelFactory
@using WickedSchema

<MudTextField @ref="multilineReference" 
    T="string" 
    Label="Multiline Select" 
    Lines="3" 
    Variant="Variant.Outlined" 
    Text="@messageViewModel?.Data?.Body" 
    Adornment="Adornment.End" 
    AdornmentIcon="@Icons.Material.Filled.Api" 
    OnAdornmentClick="@(() => AddMessage(multilineReference!.Text ?? ""))" 
/>

@code {
    private MudTextField<string>? multilineReference;
    private string sampleText = "Sample text";
    private MessageViewModel? messageViewModel;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = SessionsViewModel!.SessionViewModel!.MessagesViewModel;

        // Create a new Message DTO for testing
        var message = new Message
        {
            Body = "hello claude"
            // Add other properties if needed
        };

        messageViewModel = MessageViewModelFactory.Create(
            SessionsViewModel.SessionViewModel,
            ViewModel,
            message
        );
        messageViewModel.State = LzItemViewModelState.New;

        await base.OnInitializedAsync();
    }

    private async Task AddMessage(string text)
    {
        try
        {
            messageViewModel!.Data.Body = text;
            if (string.IsNullOrEmpty(messageViewModel!.Id))
            {
                await messageViewModel.CreateAsync();
            }
            else
            {
                await messageViewModel.UpdateAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StateHasChanged();
    }   
}